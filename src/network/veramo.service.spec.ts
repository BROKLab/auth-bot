import { Test, TestingModule } from '@nestjs/testing';
import { NetworkModuleMeta } from './network.module';
import { VeramoService } from './veramo.service';

describe('Veramo tests', () => {
  let service: VeramoService;
  let module: TestingModule;

  const nameClaim = { name: 'Ola Nordman' };
  const ageClaim = { age: 22 };
  beforeEach(async () => {
    module = await Test.createTestingModule(NetworkModuleMeta).compile();
    service = module.get<VeramoService>(VeramoService);
    await module.init();
  });
  afterEach(async () => {
    await module.close();
  });
  it('should be defined', () => {
    expect(service).toBeDefined();
  });
  it('should create', async () => {
    const identity = await service.createIdentity();
    expect(identity.did).toContain('did');
  });
  it('should have atleast one identity in list, because it has been provsioned', async () => {
    const identities = await service.listIdentities();
    expect(identities.length).toBeGreaterThanOrEqual(1);
  });
  it('should getIssuer', async () => {
    const issuer = await service.getIssuer();
    expect(issuer).toBeDefined();
  });
  it('should create VC and verify VC against issuer', async () => {
    const subject = 'did:ethr:brok:0x03719c5f561b5342216fd3b204d890cf157f192f7bf40ed3f9301c5ca05690726d';
    const vc = await service.issueCredential(nameClaim, subject, ['PersonCredential']);
    const issuer = await service.getIssuer();
    const validVC = await service.verifyJWT(vc.proof.jwt);

    expect(validVC).toBe(true);
    expect(vc.issuer.id).toBe(issuer.did);
    expect(vc.credentialSubject.id).toBe(subject);
  });

  it('should find credentials for did', async () => {
    const subject = 'did:ethr:brok:0x0260cc4eb9ce0614f920d3f47cfe4a5b177d64a00e04c50fdf392b1ada891aa675';
    await service.issueCredential(nameClaim, subject, ['PersonCredential']);
    const vcs = await service.findCredentials(subject);

    const vcWithName = vcs.find((vc) => 'name' in vc.verifiableCredential.credentialSubject);
    expect(vcWithName).toBeDefined();
    expect(vcWithName.verifiableCredential.credentialSubject.name).toBe(nameClaim.name);
  });
  it('should create verfiable presentation', async () => {
    const subject = 'did:ethr:brok:0x0260cc4eb9ce0614f920d3f47cfe4a5b177d64a00e04c50fdf392b1ada891aa675';
    const verifier = await service.createIdentity();
    const nameVC = await service.issueCredential(nameClaim, subject, ['PersonCredential']);
    const ageVC = await service.issueCredential(ageClaim, subject, ['PersonCredential']);
    const vp = await service.createVerfiablePresentation(verifier.did, [nameVC, ageVC]);

    console.log('vp => ', vp);
    const validVP = await service.verifyVP(vp.proof.jwt);
    expect(validVP).toBe(true);
  });
  it('should create verfiable presentation', async () => {
    const subject = 'did:ethr:brok:0x0260cc4eb9ce0614f920d3f47cfe4a5b177d64a00e04c50fdf392b1ada891aa675';
    const verifier = await service.createIdentity();
    const nameVC = await service.issueCredential(nameClaim, subject, ['PersonCredential']);
    const ageVC = await service.issueCredential(ageClaim, subject, ['PersonCredential']);
    const vp = await service.createVerfiablePresentation(verifier.did, [nameVC, ageVC]);

    console.log('vp => ', vp);
    const validVP = await service.verifyVP(vp.proof.jwt);
    expect(validVP).toBe(true);
  });

  it('should decode VC from JWT', async () => {
    const VC_JWT =
      'eyJhbGciOiJFUzI1NksiLCJ0eXAiOiJKV1QifQ.eyJ2YyI6eyJjcmVkZW50aWFsU3ViamVjdCI6eyJiYW5rSWRUb2tlbiI6ImV5SjBlWEFpT2lKS1YxUWlMQ0poYkdjaU9pSlNVekkxTmlJc0ltdHBaQ0k2SWpsRk1rVXpOME0xTVRWR1JUYzVNa05CUVVJNE5EZzNSRUpHTmtFNE5UbEJNRVpDT0VFNE5FUWlmUS5leUpwYzNNaU9pSm9kSFJ3Y3pvdkwySnNiMk5yWTJoaGJtZGxjbk11WTNKcGFYQjBieTVwWkNJc0ltRjFaQ0k2SW5WeWJqcHRlVHBoY0hCc2FXTmhkR2x2YmpwcFpHVnVkR2xtYVdWeU9qZ3dOakFpTENKcFpHVnVkR2wwZVhOamFHVnRaU0k2SW01dlltRnVhMmxrSWl3aVlYVjBhR1Z1ZEdsallYUnBiMjUwZVhCbElqb2lkWEp1T21keWJqcGhkWFJvYmpwdWJ6cGlZVzVyYVdRNlkyVnVkSEpoYkNJc0ltRjFkR2hsYm5ScFkyRjBhVzl1YldWMGFHOWtJam9pZFhKdU9tOWhjMmx6T201aGJXVnpPblJqT2xOQlRVdzZNaTR3T21Gak9tTnNZWE56WlhNNlUyOW1kSGRoY21WUVMwa2lMQ0poZFhSb1pXNTBhV05oZEdsdmJtbHVjM1JoYm5RaU9pSXlNREl3TFRFeUxURTJWREUwT2pVeE9qUXhMams0TmxvaUxDSnVZVzFsYVdSbGJuUnBabWxsY2lJNklqWXhNbUpqT0RJNU5ERmtORFJqWXpaaE16ZGtNbUk1WVRjeU5UQXhOekl3SWl3aWMzVmlJam9pZXpZeE1tSmpPREk1TFRReFpEUXROR05qTmkxaE16ZGtMVEppT1dFM01qVXdNVGN5TUgwaUxDSnpaWE56YVc5dWFXNWtaWGdpT2lJMk5ERTBabVprWkMweFl6ZG1MVFF6TWprdFlXUm1PQzA1T0RVME16VmhOekkyWlRZaUxDSjFibWx4ZFdWdFpYSmphR0Z1ZEdsa0lqb2lNVEl6TkRVMk56ZzVJaXdpZFc1cGNYVmxkWE5sY21sa0lqb2lPVFUzT0MwMk1EQXdMVFF0TkRZME56VXhJaXdpWTJWeWRITjFZbXBsWTNRaU9pSkRUajFjSWt4dkxDQk5iM0owWlc1Y0lpd2dUejFVWlhOMFFtRnVhekVnUVZNc0lFTTlUazhzSUZORlVrbEJURTVWVFVKRlVqMDVOVGM0TFRZd01EQXROQzAwTmpRM05URWlMQ0pqWlhKMGFYTnpkV1Z5SWpvaVEwNDlRbUZ1YTBsRUlDMGdWR1Z6ZEVKaGJtc3hJQzBnUW1GdWF5QkRRU0F6TENCUFZUMHhNak0wTlRZM09Ea3NJRTg5VkdWemRFSmhibXN4SUVGVExDQkRQVTVQSWl3aWFYTnpkV1Z5SWpvaVEwNDlRbUZ1YTBsRUlDMGdWR1Z6ZEVKaGJtc3hJQzBnUW1GdWF5QkRRU0F6TENCUFZUMHhNak0wTlRZM09Ea3NJRTg5VkdWemRFSmhibXN4SUVGVExDQkRQVTVQSWl3aVpHRjBaVzltWW1seWRHZ2lPaUl4T1RJeE1UQXhOQ0lzSW1KcGNuUm9aR0YwWlNJNklqRTVNakV0TVRBdE1UUWlMQ0p6YjJOcFlXeHVieUk2SWpFME1UQXlNVEl6T1Rjeklpd2ljMlZ5YVdGc2JuVnRZbVZ5SWpvaU9UVTNPQzAyTURBd0xUUXRORFkwTnpVeElpd2lZMjkxYm5SeWVTSTZJazVQSWl3aWFYTnpkV2x1WjJKaGJtc2lPaUpVWlhOMFFtRnVhekVnUVZNaUxDSnVZVzFsSWpvaVRHOHNJRTF2Y25SbGJpSXNJbWxoZENJNk1UWXdPREV6TURNd01Td2libUptSWpveE5qQTRNVE13TXpBeExDSmxlSEFpT2pFMk1EZ3lNVFkyTkRGOS5Melh5dHNEUnRaczJWNk5IWWg4UllZZS1SRUdKNy00ZzloOVBHQ3F2SHFiSWsxRC1WVUJySFJmYzAzT253WTlzTUt5VDRyS21mbDJKQXhRWUV1czVNdzdranloOTlMbzdmeUVxMTVnZEQ1TEViRkdTZXRLOEJ3MU1BNEF0ZS1MM2VZQVFjTzN3MzgwdGw0TFMxMzVEdU9XXzBQa0xFcGJ0bVc3VkxNNzZFUHJ1TTJDdjRUVG5pSVR3V2UwOTB0TjdHWDQwOEpGRHFEVWV2S0REYXB4UGNJSGJwUXVNS1Y3Q2podXZwSHdmdlg1NjVwQzdOcVRlbllDSUdsSEwyd2FUOWFNX1RxS2dwNXppUjhKSEIwTWRzLXlCcGo2YnZtbVJZRTRjUmZyRFowRDJ2eDJUUmNkenVKQnBBX0ZXTjJETktKYkxFZ3IyemNKQUhmMTVRUVlPVlEifSwiQGNvbnRleHQiOlsiaHR0cHM6Ly93d3cudzMub3JnLzIwMTgvY3JlZGVudGlhbHMvdjEiXSwidHlwZSI6WyJWZXJpZmlhYmxlQ3JlZGVudGlhbCJdfSwic3ViIjoiZGlkOmV0aHI6YnJvazoweDAzMmZlNmNkMmFhN2U2ZjNlMjJjMDVmM2YyMmIwN2FjNzliZmM1OTQwZGU0OTllOTE5Yzc2NmUxODdhOWUxZjdmZSIsIm5iZiI6MTYyNDU2NzkzNywiaXNzIjoiZGlkOmV0aHI6YnJvazoweDAzMmZlNmNkMmFhN2U2ZjNlMjJjMDVmM2YyMmIwN2FjNzliZmM1OTQwZGU0OTllOTE5Yzc2NmUxODdhOWUxZjdmZSJ9.xKah85C28Eu479_qynIAxmoVYn-ezKscPthKtMstxABYr8QAHcXFvzY9SEVNmL_NMNC0aHFqMdha21kxuShd6w';
    const decoded = await service.decodeJWT(VC_JWT);
    console.log('decoded VC', decoded);
    expect(decoded).toBeTruthy();
  });
  it('should decode VP from JWT', async () => {
    const VP_JWT =
      'eyJhbGciOiJFUzI1NksiLCJ0eXAiOiJKV1QifQ.eyJ2cCI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSJdLCJ0eXBlIjpbIlZlcmlmaWFibGVQcmVzZW50YXRpb24iXSwidmVyaWZpYWJsZUNyZWRlbnRpYWwiOlsiZXlKaGJHY2lPaUpGVXpJMU5rc2lMQ0owZVhBaU9pSktWMVFpZlEuZXlKMll5STZleUpqY21Wa1pXNTBhV0ZzVTNWaWFtVmpkQ0k2ZXlKaVlXNXJTV1JVYjJ0bGJpSTZJbVY1U2pCbFdFRnBUMmxLUzFZeFVXbE1RMHBvWWtkamFVOXBTbE5WZWtreFRtbEpjMGx0ZEhCYVEwazJTV3BzUmsxclZYcE9NRTB4VFZSV1IxSlVZelZOYTA1Q1VWVkpORTVFWnpOU1JVcEhUbXRGTkU1VWJFSk5SVnBEVDBWRk5FNUZVV2xtVVM1bGVVcHdZek5OYVU5cFNtOWtTRkozWTNwdmRrd3lTbk5pTWs1eVdUSm9hR0p0Wkd4amJrMTFXVE5LY0dGWVFqQmllVFZ3V2tOSmMwbHRSakZhUTBrMlNXNVdlV0pxY0hSbFZIQm9ZMGhDYzJGWFRtaGtSMngyWW1wd2NGcEhWblZrUjJ4dFlWZFdlVTlxWjNkT2FrRnBURU5LY0ZwSFZuVmtSMnd3WlZoT2FtRkhWblJhVTBrMlNXMDFkbGx0Um5WaE1teHJTV2wzYVZsWVZqQmhSMVoxWkVkc2FsbFlVbkJpTWpVd1pWaENiRWxxYjJsa1dFcDFUMjFrZVdKcWNHaGtXRkp2WW1wd2RXSjZjR2xaVnpWeVlWZFJObGt5Vm5Wa1NFcG9Za05KYzBsdFJqRmtSMmhzWW01U2NGa3lSakJoVnpsMVlsZFdNR0ZIT1d0SmFtOXBaRmhLZFU5dE9XaGpNbXg2VDIwMWFHSlhWbnBQYmxKcVQyeE9RbFJWZHpaTmFUUjNUMjFHYWs5dFRuTlpXRTU2V2xoTk5sVXlPVzFrU0dSb1kyMVdVVk13YTJsTVEwcG9aRmhTYjFwWE5UQmhWMDVvWkVkc2RtSnRiSFZqTTFKb1ltNVJhVTlwU1hsTlJFbDNURlJGZVV4VVJUSldSRVV3VDJwVmVFOXFVWGhNYW1zMFRteHZhVXhEU25WWlZ6RnNZVmRTYkdKdVVuQmFiV3hzWTJsSk5rbHFXWGhOYlVwcVQwUkpOVTVFUm10T1JGSnFXWHBhYUUxNlpHdE5iVWsxV1ZSamVVNVVRWGhPZWtsM1NXbDNhV016Vm1sSmFtOXBaWHBaZUUxdFNtcFBSRWsxVEZSUmVGcEVVWFJPUjA1cVRta3hhRTE2Wkd0TVZFcHBUMWRGTTAxcVZYZE5WR041VFVnd2FVeERTbnBhV0U1NllWYzVkV0ZYTld0YVdHZHBUMmxKTWs1RVJUQmFiVnByV2tNd2VGbDZaRzFNVkZGNlRXcHJkRmxYVW0xUFF6QTFUMFJWTUUxNlZtaE9la2t5V2xSWmFVeERTakZpYld4NFpGZFdkRnBZU21waFIwWjFaRWRzYTBscWIybE5WRWw2VGtSVk1rNTZaelZKYVhkcFpGYzFjR05ZVm14a1dFNXNZMjFzYTBscWIybFBWRlV6VDBNd01rMUVRWGRNVkZGMFRrUlpNRTU2VlhoSmFYZHBXVEpXZVdSSVRqRlpiWEJzV1ROUmFVOXBTa1JVYWpGalNXdDRka3hEUWs1aU0wb3dXbGMxWTBscGQyZFVlakZWV2xoT01GRnRSblZoZWtWblVWWk5jMGxGVFRsVWF6aHpTVVpPUmxWcmJFSlVSVFZXVkZWS1JsVnFNRFZPVkdNMFRGUlpkMDFFUVhST1F6QXdUbXBSTTA1VVJXbE1RMHBxV2xoS01HRllUbnBrVjFaNVNXcHZhVkV3TkRsUmJVWjFZVEJzUlVsRE1HZFdSMVo2WkVWS2FHSnRjM2hKUXpCblVXMUdkV0Y1UWtSUlUwRjZURU5DVUZaVU1IaE5hazB3VGxSWk0wOUVhM05KUlRnNVZrZFdlbVJGU21oaWJYTjRTVVZHVkV4RFFrUlFWVFZRU1dsM2FXRllUbnBrVjFaNVNXcHZhVkV3TkRsUmJVWjFZVEJzUlVsRE1HZFdSMVo2WkVWS2FHSnRjM2hKUXpCblVXMUdkV0Y1UWtSUlUwRjZURU5DVUZaVU1IaE5hazB3VGxSWk0wOUVhM05KUlRnNVZrZFdlbVJGU21oaWJYTjRTVVZHVkV4RFFrUlFWVFZRU1dsM2FWcEhSakJhVnpsdFdXMXNlV1JIWjJsUGFVbDRUMVJKZUUxVVFYaE9RMGx6U1cxS2NHTnVVbTlhUjBZd1dsTkpOa2xxUlRWTmFrVjBUVlJCZEUxVVVXbE1RMHA2WWpKT2NGbFhlSFZpZVVrMlNXcEZNRTFVUVhsTlZFbDZUMVJqZWtscGQybGpNbFo1WVZkR2MySnVWblJaYlZaNVNXcHZhVTlVVlROUFF6QXlUVVJCZDB4VVVYUk9SRmt3VG5wVmVFbHBkMmxaTWpreFltNVNlV1ZUU1RaSmF6VlFTV2wzYVdGWVRucGtWMngxV2pKS2FHSnRjMmxQYVVwVldsaE9NRkZ0Um5WaGVrVm5VVlpOYVV4RFNuVlpWekZzU1dwdmFWUkhPSE5KUlRGMlkyNVNiR0pwU1hOSmJXeG9aRU5KTmsxVVdYZFBSRVY2VFVSTmQwMVRkMmxpYlVwdFNXcHZlRTVxUVRSTlZFMTNUWHBCZUV4RFNteGxTRUZwVDJwRk1rMUVaM2xOVkZreVRrUkdPUzVNZWxoNWRITkVVblJhY3pKV05rNUlXV2c0VWxsWlpTMVNSVWRLTnkwMFp6bG9PVkJIUTNGMlNIRmlTV3N4UkMxV1ZVSnlTRkptWXpBelQyNTNXVGx6VFV0NVZEUnlTMjFtYkRKS1FYaFJXVVYxY3pWTmR6ZHJhbmxvT1RsTWJ6ZG1lVVZ4TVRWblpFUTFURVZpUmtkVFpYUkxPRUozTVUxQk5FRjBaUzFNTTJWWlFWRmpUek4zTXpnd2RHdzBURk14TXpWRWRVOVhYekJRYTB4RmNHSjBiVmMzVmt4Tk56WkZVSEoxVFRKRGRqUlVWRzVwU1ZSM1YyVXdPVEIwVGpkSFdEUXdPRXBHUkhGRVZXVjJTMFJFWVhCNFVHTkpTR0p3VVhWTlMxWTNRMnBvZFhad1NIZG1kbGcxTmpWd1F6ZE9jVlJsYmxsRFNVZHNTRXd5ZDJGVU9XRk5YMVJ4UzJkd05YcHBVamhLU0VJd1RXUnpMWGxDY0dvMlluWnRiVkpaUlRSalVtWnlSRm93UkRKMmVESlVVbU5rZW5WS1FuQkJYMFpYVGpKRVRrdEtZa3hGWjNJeWVtTktRVWhtTVRWUlVWbFBWbEVpZlN3aVFHTnZiblJsZUhRaU9sc2lhSFIwY0hNNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TVRndlkzSmxaR1Z1ZEdsaGJITXZkakVpWFN3aWRIbHdaU0k2V3lKV1pYSnBabWxoWW14bFEzSmxaR1Z1ZEdsaGJDSmRmU3dpYzNWaUlqb2laR2xrT21WMGFISTZZbkp2YXpvd2VEQXpNbVpsTm1Oa01tRmhOMlUyWmpObE1qSmpNRFZtTTJZeU1tSXdOMkZqTnpsaVptTTFPVFF3WkdVME9UbGxPVEU1WXpjMk5tVXhPRGRoT1dVeFpqZG1aU0lzSW01aVppSTZNVFl5TkRVMk56a3pOeXdpYVhOeklqb2laR2xrT21WMGFISTZZbkp2YXpvd2VEQXpNbVpsTm1Oa01tRmhOMlUyWmpObE1qSmpNRFZtTTJZeU1tSXdOMkZqTnpsaVptTTFPVFF3WkdVME9UbGxPVEU1WXpjMk5tVXhPRGRoT1dVeFpqZG1aU0o5LnhLYWg4NUMyOEV1NDc5X3F5bklBeG1vVlluLWV6S3NjUHRoS3RNc3R4QUJZcjhRQUhjWEZ2elk5U0VWTm1MX05NTkMwYUhGcU1kaGEyMWt4dVNoZDZ3Il19LCJuYmYiOjE2MjQ1Njc5MzcsImlzcyI6ImRpZDpldGhyOmJyb2s6MHgwMzJmZTZjZDJhYTdlNmYzZTIyYzA1ZjNmMjJiMDdhYzc5YmZjNTk0MGRlNDk5ZTkxOWM3NjZlMTg3YTllMWY3ZmUiLCJhdWQiOlsiZGlkOmV0aHI6YnJvazoweDAyYmRlOTg0N2FkODU2OWRmMTU5YjU3ODNkZjM4OWMyZGI0ZDAwYzI1YTRjNDgyMmVlYTZmYjk5NjNiMDk2ZTE2ZCJdfQ.Bp3BUaKazMoxXMmILap3YkdPVL5skt_OTHNVQ8pDrAe99oWO-KetwhaG_DieldpqLBTJphVjmf54RuImkdLo7Q';
    const decoded = await service.decodeJWT(VP_JWT, {
      issuer: 'did:ethr:brok:0x032fe6cd2aa7e6f3e22c05f3f22b07ac79bfc5940de499e919c766e187a9e1f7fe',
      audience: 'did:ethr:brok:0x02bde9847ad8569df159b5783df389c2db4d00c25a4c4822eea6fb9963b096e16d',
    });
    console.log('decoded VP', decoded);

    expect(decoded).toBeTruthy();
  });

  it('should decode VP from JWT and all underlying verifiableCredentials', async () => {
    const VP_JWT =
      'eyJhbGciOiJFUzI1NksiLCJ0eXAiOiJKV1QifQ.eyJ2cCI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSJdLCJ0eXBlIjpbIlZlcmlmaWFibGVQcmVzZW50YXRpb24iXSwidmVyaWZpYWJsZUNyZWRlbnRpYWwiOlsiZXlKaGJHY2lPaUpGVXpJMU5rc2lMQ0owZVhBaU9pSktWMVFpZlEuZXlKMll5STZleUpqY21Wa1pXNTBhV0ZzVTNWaWFtVmpkQ0k2ZXlKaVlXNXJTV1JVYjJ0bGJpSTZJbVY1U2pCbFdFRnBUMmxLUzFZeFVXbE1RMHBvWWtkamFVOXBTbE5WZWtreFRtbEpjMGx0ZEhCYVEwazJTV3BzUmsxclZYcE9NRTB4VFZSV1IxSlVZelZOYTA1Q1VWVkpORTVFWnpOU1JVcEhUbXRGTkU1VWJFSk5SVnBEVDBWRk5FNUZVV2xtVVM1bGVVcHdZek5OYVU5cFNtOWtTRkozWTNwdmRrd3lTbk5pTWs1eVdUSm9hR0p0Wkd4amJrMTFXVE5LY0dGWVFqQmllVFZ3V2tOSmMwbHRSakZhUTBrMlNXNVdlV0pxY0hSbFZIQm9ZMGhDYzJGWFRtaGtSMngyWW1wd2NGcEhWblZrUjJ4dFlWZFdlVTlxWjNkT2FrRnBURU5LY0ZwSFZuVmtSMnd3WlZoT2FtRkhWblJhVTBrMlNXMDFkbGx0Um5WaE1teHJTV2wzYVZsWVZqQmhSMVoxWkVkc2FsbFlVbkJpTWpVd1pWaENiRWxxYjJsa1dFcDFUMjFrZVdKcWNHaGtXRkp2WW1wd2RXSjZjR2xaVnpWeVlWZFJObGt5Vm5Wa1NFcG9Za05KYzBsdFJqRmtSMmhzWW01U2NGa3lSakJoVnpsMVlsZFdNR0ZIT1d0SmFtOXBaRmhLZFU5dE9XaGpNbXg2VDIwMWFHSlhWbnBQYmxKcVQyeE9RbFJWZHpaTmFUUjNUMjFHYWs5dFRuTlpXRTU2V2xoTk5sVXlPVzFrU0dSb1kyMVdVVk13YTJsTVEwcG9aRmhTYjFwWE5UQmhWMDVvWkVkc2RtSnRiSFZqTTFKb1ltNVJhVTlwU1hsTlJFbDNURlJGZVV4VVJUSldSRVV3VDJwVmVFOXFVWGhNYW1zMFRteHZhVXhEU25WWlZ6RnNZVmRTYkdKdVVuQmFiV3hzWTJsSk5rbHFXWGhOYlVwcVQwUkpOVTVFUm10T1JGSnFXWHBhYUUxNlpHdE5iVWsxV1ZSamVVNVVRWGhPZWtsM1NXbDNhV016Vm1sSmFtOXBaWHBaZUUxdFNtcFBSRWsxVEZSUmVGcEVVWFJPUjA1cVRta3hhRTE2Wkd0TVZFcHBUMWRGTTAxcVZYZE5WR041VFVnd2FVeERTbnBhV0U1NllWYzVkV0ZYTld0YVdHZHBUMmxKTWs1RVJUQmFiVnByV2tNd2VGbDZaRzFNVkZGNlRXcHJkRmxYVW0xUFF6QTFUMFJWTUUxNlZtaE9la2t5V2xSWmFVeERTakZpYld4NFpGZFdkRnBZU21waFIwWjFaRWRzYTBscWIybE5WRWw2VGtSVk1rNTZaelZKYVhkcFpGYzFjR05ZVm14a1dFNXNZMjFzYTBscWIybFBWRlV6VDBNd01rMUVRWGRNVkZGMFRrUlpNRTU2VlhoSmFYZHBXVEpXZVdSSVRqRlpiWEJzV1ROUmFVOXBTa1JVYWpGalNXdDRka3hEUWs1aU0wb3dXbGMxWTBscGQyZFVlakZWV2xoT01GRnRSblZoZWtWblVWWk5jMGxGVFRsVWF6aHpTVVpPUmxWcmJFSlVSVFZXVkZWS1JsVnFNRFZPVkdNMFRGUlpkMDFFUVhST1F6QXdUbXBSTTA1VVJXbE1RMHBxV2xoS01HRllUbnBrVjFaNVNXcHZhVkV3TkRsUmJVWjFZVEJzUlVsRE1HZFdSMVo2WkVWS2FHSnRjM2hKUXpCblVXMUdkV0Y1UWtSUlUwRjZURU5DVUZaVU1IaE5hazB3VGxSWk0wOUVhM05KUlRnNVZrZFdlbVJGU21oaWJYTjRTVVZHVkV4RFFrUlFWVFZRU1dsM2FXRllUbnBrVjFaNVNXcHZhVkV3TkRsUmJVWjFZVEJzUlVsRE1HZFdSMVo2WkVWS2FHSnRjM2hKUXpCblVXMUdkV0Y1UWtSUlUwRjZURU5DVUZaVU1IaE5hazB3VGxSWk0wOUVhM05KUlRnNVZrZFdlbVJGU21oaWJYTjRTVVZHVkV4RFFrUlFWVFZRU1dsM2FWcEhSakJhVnpsdFdXMXNlV1JIWjJsUGFVbDRUMVJKZUUxVVFYaE9RMGx6U1cxS2NHTnVVbTlhUjBZd1dsTkpOa2xxUlRWTmFrVjBUVlJCZEUxVVVXbE1RMHA2WWpKT2NGbFhlSFZpZVVrMlNXcEZNRTFVUVhsTlZFbDZUMVJqZWtscGQybGpNbFo1WVZkR2MySnVWblJaYlZaNVNXcHZhVTlVVlROUFF6QXlUVVJCZDB4VVVYUk9SRmt3VG5wVmVFbHBkMmxaTWpreFltNVNlV1ZUU1RaSmF6VlFTV2wzYVdGWVRucGtWMngxV2pKS2FHSnRjMmxQYVVwVldsaE9NRkZ0Um5WaGVrVm5VVlpOYVV4RFNuVlpWekZzU1dwdmFWUkhPSE5KUlRGMlkyNVNiR0pwU1hOSmJXeG9aRU5KTmsxVVdYZFBSRVY2VFVSTmQwMVRkMmxpYlVwdFNXcHZlRTVxUVRSTlZFMTNUWHBCZUV4RFNteGxTRUZwVDJwRk1rMUVaM2xOVkZreVRrUkdPUzVNZWxoNWRITkVVblJhY3pKV05rNUlXV2c0VWxsWlpTMVNSVWRLTnkwMFp6bG9PVkJIUTNGMlNIRmlTV3N4UkMxV1ZVSnlTRkptWXpBelQyNTNXVGx6VFV0NVZEUnlTMjFtYkRKS1FYaFJXVVYxY3pWTmR6ZHJhbmxvT1RsTWJ6ZG1lVVZ4TVRWblpFUTFURVZpUmtkVFpYUkxPRUozTVUxQk5FRjBaUzFNTTJWWlFWRmpUek4zTXpnd2RHdzBURk14TXpWRWRVOVhYekJRYTB4RmNHSjBiVmMzVmt4Tk56WkZVSEoxVFRKRGRqUlVWRzVwU1ZSM1YyVXdPVEIwVGpkSFdEUXdPRXBHUkhGRVZXVjJTMFJFWVhCNFVHTkpTR0p3VVhWTlMxWTNRMnBvZFhad1NIZG1kbGcxTmpWd1F6ZE9jVlJsYmxsRFNVZHNTRXd5ZDJGVU9XRk5YMVJ4UzJkd05YcHBVamhLU0VJd1RXUnpMWGxDY0dvMlluWnRiVkpaUlRSalVtWnlSRm93UkRKMmVESlVVbU5rZW5WS1FuQkJYMFpYVGpKRVRrdEtZa3hGWjNJeWVtTktRVWhtTVRWUlVWbFBWbEVpZlN3aVFHTnZiblJsZUhRaU9sc2lhSFIwY0hNNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TVRndlkzSmxaR1Z1ZEdsaGJITXZkakVpWFN3aWRIbHdaU0k2V3lKV1pYSnBabWxoWW14bFEzSmxaR1Z1ZEdsaGJDSmRmU3dpYzNWaUlqb2laR2xrT21WMGFISTZZbkp2YXpvd2VEQXpNbVpsTm1Oa01tRmhOMlUyWmpObE1qSmpNRFZtTTJZeU1tSXdOMkZqTnpsaVptTTFPVFF3WkdVME9UbGxPVEU1WXpjMk5tVXhPRGRoT1dVeFpqZG1aU0lzSW01aVppSTZNVFl5TkRVMk56a3pOeXdpYVhOeklqb2laR2xrT21WMGFISTZZbkp2YXpvd2VEQXpNbVpsTm1Oa01tRmhOMlUyWmpObE1qSmpNRFZtTTJZeU1tSXdOMkZqTnpsaVptTTFPVFF3WkdVME9UbGxPVEU1WXpjMk5tVXhPRGRoT1dVeFpqZG1aU0o5LnhLYWg4NUMyOEV1NDc5X3F5bklBeG1vVlluLWV6S3NjUHRoS3RNc3R4QUJZcjhRQUhjWEZ2elk5U0VWTm1MX05NTkMwYUhGcU1kaGEyMWt4dVNoZDZ3Il19LCJuYmYiOjE2MjQ1Njc5MzcsImlzcyI6ImRpZDpldGhyOmJyb2s6MHgwMzJmZTZjZDJhYTdlNmYzZTIyYzA1ZjNmMjJiMDdhYzc5YmZjNTk0MGRlNDk5ZTkxOWM3NjZlMTg3YTllMWY3ZmUiLCJhdWQiOlsiZGlkOmV0aHI6YnJvazoweDAyYmRlOTg0N2FkODU2OWRmMTU5YjU3ODNkZjM4OWMyZGI0ZDAwYzI1YTRjNDgyMmVlYTZmYjk5NjNiMDk2ZTE2ZCJdfQ.Bp3BUaKazMoxXMmILap3YkdPVL5skt_OTHNVQ8pDrAe99oWO-KetwhaG_DieldpqLBTJphVjmf54RuImkdLo7Q';
    const decoded = await service.decodeJWT(VP_JWT, {
      issuer: 'did:ethr:brok:0x032fe6cd2aa7e6f3e22c05f3f22b07ac79bfc5940de499e919c766e187a9e1f7fe',
      audience: 'did:ethr:brok:0x02bde9847ad8569df159b5783df389c2db4d00c25a4c4822eea6fb9963b096e16d',
      decodeCredentials: true,
    });
    console.log('decoded VP', decoded);
    decoded.vp.verifiableCredential.map((vc) => {
      console.log('decoded VC', vc);
    });

    expect(decoded).toBeTruthy();
    expect(decoded.vp.verifiableCredential.length).toBeGreaterThanOrEqual(1);
  });

  it('should fail decode VP from JWT if issuer is something else', async () => {
    const VP_JWT =
      'eyJhbGciOiJFUzI1NksiLCJ0eXAiOiJKV1QifQ.eyJ2cCI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSJdLCJ0eXBlIjpbIlZlcmlmaWFibGVQcmVzZW50YXRpb24iXSwidmVyaWZpYWJsZUNyZWRlbnRpYWwiOlsiZXlKaGJHY2lPaUpGVXpJMU5rc2lMQ0owZVhBaU9pSktWMVFpZlEuZXlKMll5STZleUpqY21Wa1pXNTBhV0ZzVTNWaWFtVmpkQ0k2ZXlKaVlXNXJTV1JVYjJ0bGJpSTZJbVY1U2pCbFdFRnBUMmxLUzFZeFVXbE1RMHBvWWtkamFVOXBTbE5WZWtreFRtbEpjMGx0ZEhCYVEwazJTV3BzUmsxclZYcE9NRTB4VFZSV1IxSlVZelZOYTA1Q1VWVkpORTVFWnpOU1JVcEhUbXRGTkU1VWJFSk5SVnBEVDBWRk5FNUZVV2xtVVM1bGVVcHdZek5OYVU5cFNtOWtTRkozWTNwdmRrd3lTbk5pTWs1eVdUSm9hR0p0Wkd4amJrMTFXVE5LY0dGWVFqQmllVFZ3V2tOSmMwbHRSakZhUTBrMlNXNVdlV0pxY0hSbFZIQm9ZMGhDYzJGWFRtaGtSMngyWW1wd2NGcEhWblZrUjJ4dFlWZFdlVTlxWjNkT2FrRnBURU5LY0ZwSFZuVmtSMnd3WlZoT2FtRkhWblJhVTBrMlNXMDFkbGx0Um5WaE1teHJTV2wzYVZsWVZqQmhSMVoxWkVkc2FsbFlVbkJpTWpVd1pWaENiRWxxYjJsa1dFcDFUMjFrZVdKcWNHaGtXRkp2WW1wd2RXSjZjR2xaVnpWeVlWZFJObGt5Vm5Wa1NFcG9Za05KYzBsdFJqRmtSMmhzWW01U2NGa3lSakJoVnpsMVlsZFdNR0ZIT1d0SmFtOXBaRmhLZFU5dE9XaGpNbXg2VDIwMWFHSlhWbnBQYmxKcVQyeE9RbFJWZHpaTmFUUjNUMjFHYWs5dFRuTlpXRTU2V2xoTk5sVXlPVzFrU0dSb1kyMVdVVk13YTJsTVEwcG9aRmhTYjFwWE5UQmhWMDVvWkVkc2RtSnRiSFZqTTFKb1ltNVJhVTlwU1hsTlJFbDNURlJGZVV4VVJUSldSRVV3VDJwVmVFOXFVWGhNYW1zMFRteHZhVXhEU25WWlZ6RnNZVmRTYkdKdVVuQmFiV3hzWTJsSk5rbHFXWGhOYlVwcVQwUkpOVTVFUm10T1JGSnFXWHBhYUUxNlpHdE5iVWsxV1ZSamVVNVVRWGhPZWtsM1NXbDNhV016Vm1sSmFtOXBaWHBaZUUxdFNtcFBSRWsxVEZSUmVGcEVVWFJPUjA1cVRta3hhRTE2Wkd0TVZFcHBUMWRGTTAxcVZYZE5WR041VFVnd2FVeERTbnBhV0U1NllWYzVkV0ZYTld0YVdHZHBUMmxKTWs1RVJUQmFiVnByV2tNd2VGbDZaRzFNVkZGNlRXcHJkRmxYVW0xUFF6QTFUMFJWTUUxNlZtaE9la2t5V2xSWmFVeERTakZpYld4NFpGZFdkRnBZU21waFIwWjFaRWRzYTBscWIybE5WRWw2VGtSVk1rNTZaelZKYVhkcFpGYzFjR05ZVm14a1dFNXNZMjFzYTBscWIybFBWRlV6VDBNd01rMUVRWGRNVkZGMFRrUlpNRTU2VlhoSmFYZHBXVEpXZVdSSVRqRlpiWEJzV1ROUmFVOXBTa1JVYWpGalNXdDRka3hEUWs1aU0wb3dXbGMxWTBscGQyZFVlakZWV2xoT01GRnRSblZoZWtWblVWWk5jMGxGVFRsVWF6aHpTVVpPUmxWcmJFSlVSVFZXVkZWS1JsVnFNRFZPVkdNMFRGUlpkMDFFUVhST1F6QXdUbXBSTTA1VVJXbE1RMHBxV2xoS01HRllUbnBrVjFaNVNXcHZhVkV3TkRsUmJVWjFZVEJzUlVsRE1HZFdSMVo2WkVWS2FHSnRjM2hKUXpCblVXMUdkV0Y1UWtSUlUwRjZURU5DVUZaVU1IaE5hazB3VGxSWk0wOUVhM05KUlRnNVZrZFdlbVJGU21oaWJYTjRTVVZHVkV4RFFrUlFWVFZRU1dsM2FXRllUbnBrVjFaNVNXcHZhVkV3TkRsUmJVWjFZVEJzUlVsRE1HZFdSMVo2WkVWS2FHSnRjM2hKUXpCblVXMUdkV0Y1UWtSUlUwRjZURU5DVUZaVU1IaE5hazB3VGxSWk0wOUVhM05KUlRnNVZrZFdlbVJGU21oaWJYTjRTVVZHVkV4RFFrUlFWVFZRU1dsM2FWcEhSakJhVnpsdFdXMXNlV1JIWjJsUGFVbDRUMVJKZUUxVVFYaE9RMGx6U1cxS2NHTnVVbTlhUjBZd1dsTkpOa2xxUlRWTmFrVjBUVlJCZEUxVVVXbE1RMHA2WWpKT2NGbFhlSFZpZVVrMlNXcEZNRTFVUVhsTlZFbDZUMVJqZWtscGQybGpNbFo1WVZkR2MySnVWblJaYlZaNVNXcHZhVTlVVlROUFF6QXlUVVJCZDB4VVVYUk9SRmt3VG5wVmVFbHBkMmxaTWpreFltNVNlV1ZUU1RaSmF6VlFTV2wzYVdGWVRucGtWMngxV2pKS2FHSnRjMmxQYVVwVldsaE9NRkZ0Um5WaGVrVm5VVlpOYVV4RFNuVlpWekZzU1dwdmFWUkhPSE5KUlRGMlkyNVNiR0pwU1hOSmJXeG9aRU5KTmsxVVdYZFBSRVY2VFVSTmQwMVRkMmxpYlVwdFNXcHZlRTVxUVRSTlZFMTNUWHBCZUV4RFNteGxTRUZwVDJwRk1rMUVaM2xOVkZreVRrUkdPUzVNZWxoNWRITkVVblJhY3pKV05rNUlXV2c0VWxsWlpTMVNSVWRLTnkwMFp6bG9PVkJIUTNGMlNIRmlTV3N4UkMxV1ZVSnlTRkptWXpBelQyNTNXVGx6VFV0NVZEUnlTMjFtYkRKS1FYaFJXVVYxY3pWTmR6ZHJhbmxvT1RsTWJ6ZG1lVVZ4TVRWblpFUTFURVZpUmtkVFpYUkxPRUozTVUxQk5FRjBaUzFNTTJWWlFWRmpUek4zTXpnd2RHdzBURk14TXpWRWRVOVhYekJRYTB4RmNHSjBiVmMzVmt4Tk56WkZVSEoxVFRKRGRqUlVWRzVwU1ZSM1YyVXdPVEIwVGpkSFdEUXdPRXBHUkhGRVZXVjJTMFJFWVhCNFVHTkpTR0p3VVhWTlMxWTNRMnBvZFhad1NIZG1kbGcxTmpWd1F6ZE9jVlJsYmxsRFNVZHNTRXd5ZDJGVU9XRk5YMVJ4UzJkd05YcHBVamhLU0VJd1RXUnpMWGxDY0dvMlluWnRiVkpaUlRSalVtWnlSRm93UkRKMmVESlVVbU5rZW5WS1FuQkJYMFpYVGpKRVRrdEtZa3hGWjNJeWVtTktRVWhtTVRWUlVWbFBWbEVpZlN3aVFHTnZiblJsZUhRaU9sc2lhSFIwY0hNNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TVRndlkzSmxaR1Z1ZEdsaGJITXZkakVpWFN3aWRIbHdaU0k2V3lKV1pYSnBabWxoWW14bFEzSmxaR1Z1ZEdsaGJDSmRmU3dpYzNWaUlqb2laR2xrT21WMGFISTZZbkp2YXpvd2VEQXpNbVpsTm1Oa01tRmhOMlUyWmpObE1qSmpNRFZtTTJZeU1tSXdOMkZqTnpsaVptTTFPVFF3WkdVME9UbGxPVEU1WXpjMk5tVXhPRGRoT1dVeFpqZG1aU0lzSW01aVppSTZNVFl5TkRVMk56a3pOeXdpYVhOeklqb2laR2xrT21WMGFISTZZbkp2YXpvd2VEQXpNbVpsTm1Oa01tRmhOMlUyWmpObE1qSmpNRFZtTTJZeU1tSXdOMkZqTnpsaVptTTFPVFF3WkdVME9UbGxPVEU1WXpjMk5tVXhPRGRoT1dVeFpqZG1aU0o5LnhLYWg4NUMyOEV1NDc5X3F5bklBeG1vVlluLWV6S3NjUHRoS3RNc3R4QUJZcjhRQUhjWEZ2elk5U0VWTm1MX05NTkMwYUhGcU1kaGEyMWt4dVNoZDZ3Il19LCJuYmYiOjE2MjQ1Njc5MzcsImlzcyI6ImRpZDpldGhyOmJyb2s6MHgwMzJmZTZjZDJhYTdlNmYzZTIyYzA1ZjNmMjJiMDdhYzc5YmZjNTk0MGRlNDk5ZTkxOWM3NjZlMTg3YTllMWY3ZmUiLCJhdWQiOlsiZGlkOmV0aHI6YnJvazoweDAyYmRlOTg0N2FkODU2OWRmMTU5YjU3ODNkZjM4OWMyZGI0ZDAwYzI1YTRjNDgyMmVlYTZmYjk5NjNiMDk2ZTE2ZCJdfQ.Bp3BUaKazMoxXMmILap3YkdPVL5skt_OTHNVQ8pDrAe99oWO-KetwhaG_DieldpqLBTJphVjmf54RuImkdLo7Q';

    await expect(
      service.decodeJWT(VP_JWT, {
        issuer: 'did:ethr:brok:SOMETHINGWRONG',
        audience: 'did:ethr:brok:0x02bde9847ad8569df159b5783df389c2db4d00c25a4c4822eea6fb9963b096e16d',
      }),
    ).rejects.toThrow('JWT issuer was ');
  });
});
